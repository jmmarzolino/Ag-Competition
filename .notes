 # {plink} --clump has two main applications:
#    To report the top X single SNP results from a genome-wide scan in terms of a smaller number of clumps of correlated SNPs (i.e. to assess how many independent loci are associated, for example)
#    To provide a quick way to combine sets of results from two or more studies, when the studies might also be genotyped on different marker sets

#--clump loads the named PLINK-format association report(s) (text files with a header line, a column containing variant IDs, and another column containing p-values) and groups results into LD-based clumps, writing a new report to plink2.clumps[.zst]. Multiple filenames can be separated by spaces or commas.

 #By default, PLINK scans these files and extracts fields with the headers SNP and P

 
 #/rhome/dkoenig/bigdata/BARLEY_CCII_PROGENY_RAD/DATA/OUTPUT/TMP/Barley_Morex_V2_TE_annotation.gff
 #format.gt.pos




### Create function to unlist and convert vectors to numeric
unlist_numeric <- function(x){
  unlist(x) %>%
    as.numeric(x)
}

### Replace negative TW with NA, unlist all vectors and convert them to numeric, fill in missing generation values
FT_FITNESS <- FT_FITNESS %>% relocate(Exp_year, .after = replicate)
FT_FITNESS[5:14] <- lapply(FT_FITNESS[5:14], unlist_numeric)
FT_FITNESS[which(FT_FITNESS$total_seed_mass_g < 0), (7:ncol(FT_FITNESS))] <- NA

FT_FITNESS$Generation <- gsub("^1_.*", 18, FT_FITNESS$Genotypes)
FT_FITNESS$Generation <- gsub("^2_.*", 28, FT_FITNESS$Generation)
FT_FITNESS$Generation <- gsub("^3_.*", 50, FT_FITNESS$Generation)
FT_FITNESS$Generation <- gsub("^7_.*", 58, FT_FITNESS$Generation)
FT_FITNESS$Generation <- gsub("^*.*_.*", 0, FT_FITNESS$Generation)

outlier_cutoff = quantile(test$FECUNDITY,0.75, na.rm = TRUE) + (1.5 * IQR(test$FECUNDITY, na.rm = TRUE))
ggplot(FT_FITNESS, aes(x = FECUNDITY)) +
  geom_histogram(bins = 50) +
  geom_vline(xintercept = outlier_cutoff, color = "red")





# add generation column
df3$Genotypes <- str_replace(df3$Genotypes, "-", "_")
#df3$Generation <- str_replace(df3$Genotypes, "(\\d)_\\d+", "\\1")
#df3$Generation <- str_replace(df3$Generation, "(\\d)_\\d+", "\\1")
#str_split_fixed(df3$Genotypes, "_", 3)
#df3[which(df3$Generation > 8), which(colnames(df3) == "Generation")] <- 0
df3$Generation <- 0
df3[grep("^1_", df3$Genotypes), which(colnames(df3)=="Generation")] <- 18
df3[grep("^2_", df3$Genotypes), which(colnames(df3)=="Generation")] <- 28
df3[grep("^3_", df3$Genotypes), which(colnames(df3)=="Generation")] <- 50
df3[grep("^7_", df3$Genotypes), which(colnames(df3)=="Generation")] <- 58

# simplify replicate col to a number
df3$replicate <- gsub("rep (\\d)", "\\1", df3$replicate)




#library(lme4)
#install_packages("lmeTest")
#library(lmeTest)
#x <-aov(lmer(Flowering_Date ~ Condition + (1|Generation:Genotypes) + (1|replicate), df3))
#x <-aov(lmer(Flowering_Date ~ Condition + Generation + (1 + Generation|Genotypes) + (1|replicate)), df3) # try to plot this line!
# Fixed: Condition, Generation
# Random: Genotype, replicate
# relationship between Generation and genotype?
# relationship between Generation and Condition...


#summary(x)
#anova(lmer()) # anova for fixed effects
#summary(aov())
#ranova(lmer()) # for random effects
#t.test(extra ~ group, data = sleep)
